{"version":3,"sources":["helpers.ts","components/Table/TableItem/index.tsx","components/Table/index.tsx","components/ModeSelector/index.tsx","components/Preloader/index.tsx","components/Pagination/index.tsx","components/PersonDescription/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["sort","array","key","a","b","TableItem","person","onPersonSelected","onClick","id","firstName","lastName","email","phone","Table","persons","onSort","sortType","sortedColomnKey","className","map","ModeSelector","onModeSelected","Preloader","Pagination","pageCount","currentPageId","onPageChanged","displayPages","pagesNumbers","i","push","start","Math","floor","pages","slice","href","event","preventDefault","page","pageId","PersonDescription","defaultValue","description","address","streetAddress","city","state","zip","App","useState","setPersons","activePerson","setActivePerson","isModeSelected","setIsModeSelected","isLoading","setIsLoading","setPageId","setSortedColumnKey","setSortType","displayPersons","length","size","result","ceil","chunk","handleModeSelected","url","axios","get","then","data","sortedPersons","catch","alert","columnKey","reverse","personId","indexOf","find","item","selected","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.477f1fc6.chunk.js","sourcesContent":["import { Column } from './types';\n\nexport const chunk = (array: any[], size: number) => {\n  const result: typeof array = []\n  for (let i = 0; i < Math.ceil(array.length / size); i++) {\n    result.push(array.slice(i * size, (i + 1) * size))\n  }\n  return result\n}\n\nexport const sort = (array: any[], key: Column) => {\n  return [...array].sort((a, b) => a[key] < b[key] ? -1 :a[key] > b[key] ? 1 : 0)\n}\n\nexport const findIndexById = (array: any[], id: number) => {\n  return array.indexOf(array.find(item => item.id === id))\n}","import React from 'react'\nimport { Person } from '../../../types'\n\ntype TableItem = {\n  person: Person,\n  onPersonSelected: (personId: number) => void\n}\nconst TableItem: React.FC<TableItem> = ({ person, onPersonSelected }) => {\n  return <tr onClick={()=>onPersonSelected(person.id)}>\n    <td>{person.id}</td>\n    <td>{person.firstName}</td>\n    <td>{person.lastName}</td>\n    <td>{person.email}</td>\n    <td>{person.phone}</td>\n  </tr>\n}\n\nexport default TableItem","import React from 'react'\nimport { Person, Column, SortType } from '../../types'\nimport './table.css'\n\nimport TableItem from './TableItem'\n\ntype Props = {\n  persons: Person[],\n  sortType: SortType,\n  sortedColomnKey: Column,\n  onSort: (columnKey: Column) => void,\n  onPersonSelected: (personId: number) => void\n}\n\nconst Table: React.FC<Props> = ({ persons, onSort, sortType, sortedColomnKey, onPersonSelected}) => {\n  return (\n    <table className='highlight responsive-table'>\n      <thead>\n        <tr>\n          <th className={sortedColomnKey === 'id' ? 'sort-'+sortType : ''} onClick={() => onSort('id')}>Id</th>\n          <th className={sortedColomnKey === 'firstName' ? 'sort-'+sortType : ''} onClick={() => onSort('firstName')}>First Name</th>\n          <th className={sortedColomnKey === 'lastName' ? 'sort-'+sortType : ''} onClick={() => onSort('lastName')}>Last Name</th>\n          <th className={sortedColomnKey === 'email' ? 'sort-'+sortType : ''} onClick={() => onSort('email')}>Email</th>\n          <th className={sortedColomnKey === 'phone' ? 'sort-'+sortType : ''} onClick={() => onSort('phone')}>Phone</th>\n        </tr>\n      </thead>\n      <tbody>\n        {persons &&\n          persons.map(person => <TableItem key={person.id + person.phone} onPersonSelected={onPersonSelected} person={person}/>)\n        }\n      </tbody>\n    </table>\n  )\n}\n\nexport default Table","import React from 'react'\nimport './modeSelector.css'\n\ntype Props = {\n  onModeSelected: (url: string) => void\n}\nconst ModeSelector: React.FC<Props> = ({onModeSelected}) => {\n  const smallUrl = 'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}'\n  const bigUrl = 'http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}'\n\n  return (\n    <div className=\"mode-selector\">\n      <h5>Выберите объем загружаемых данных</h5>\n      <button className=\"btn-small\" onClick={() => onModeSelected(smallUrl)}>Маленький</button>\n      <button className=\"btn-small red\" onClick={() => onModeSelected(bigUrl)}>Большой</button>\n    </div>\n  );\n}\n\nexport default ModeSelector;\n","import React from 'react'\nimport './preloader.css'\n\nconst Preloader = () => {\n  return (\n    <div className=\"preloader\">\n      <div className=\"preloader-wrapper big active\">\n        <div className=\"spinner-layer spinner-blue-only\">\n          <div className=\"circle-clipper left\">\n            <div className=\"circle\"></div>\n          </div><div className=\"gap-patch\">\n            <div className=\"circle\"></div>\n          </div><div className=\"circle-clipper right\">\n            <div className=\"circle\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Preloader","import React from 'react'\nimport './pagination.css'\n\ntype Props = {\n  pageCount: number,\n  currentPageId: number,\n  displayPages: number,\n  onPageChanged: (selected: number) => void\n}\nconst Pagination: React.FC<Props> = ({ pageCount, currentPageId, onPageChanged, displayPages }) => {\n  const pagesNumbers: number[] = []\n  for (let i = 0; i < pageCount; i++) pagesNumbers.push(i)\n\n  let start = currentPageId - Math.floor(displayPages / 2)\n  if (start <= 0) {\n    start = 0\n  } else if (start + displayPages > pageCount) {\n    start = pageCount - displayPages\n  }\n\n  const pages: number[] = pagesNumbers.slice(start, start + displayPages)\n\n  const handlePageIncrement = (event: React.MouseEvent) => {\n    event.preventDefault()\n    if (currentPageId < pageCount - 1) {\n      onPageChanged(currentPageId + 1)\n    }\n  }\n  const handlePageDecrement = (event: React.MouseEvent) => {\n    event.preventDefault()\n    if (currentPageId > 0) {\n      onPageChanged(currentPageId - 1)\n    }\n  }\n  const handleSelectPage = (pageId: number) => (event: React.MouseEvent) => {\n    event.preventDefault()\n    if (pageId !== currentPageId) {\n      onPageChanged(pageId)\n    }\n  }\n\n  return (\n    <ul className='pagination'>\n      <li className={currentPageId === 0 ? 'disabled' : ''}><a href='/' onClick={handlePageDecrement}>{'<'}</a></li>\n\n      {\n        pages.map(page => {\n          return <li key={page} className={page === currentPageId ? 'active' : ''}><a href='/' onClick={handleSelectPage(page)}>{page + 1}</a></li>\n        })\n      }\n\n      <li className={currentPageId === pageCount - 1 ? 'disabled' : ''}><a href='/' onClick={handlePageIncrement}>{'>'}</a></li>\n    </ul>\n  )\n}\n\nexport default Pagination","import React from 'react'\nimport { Person } from '../../types'\nimport './personDescription.css'\n\ntype Props = {\n  person: Person\n}\nconst PersonDescription: React.FC<Props> = ({ person }) => {\n  return (\n    <div className=\"person-description\">\n      <div className=\"person-description__name\">\n        Выбран пользователь: <b>{person.firstName} {person.lastName}</b>\n      </div>\n      <div className=\"person-description__description\">\n        Описание: <textarea defaultValue={person.description} />\n      </div>\n      <div className=\"person-description__address\">\n        Адрес проживания: <b>{person.address.streetAddress}</b>\n      </div>\n      <div className=\"person-description__city\">\n        Город: <b>{person.address.city}</b>\n      </div>\n      <div className=\"person-description__state\">\n        Провинция: <b>{person.address.state}</b>\n      </div>\n      <div className=\"person-description__zip\">\n        Индекс: <b>{person.address.zip}</b>\n      </div>\n    </div>\n  )\n}\n\nexport default PersonDescription\n","import React, { useState } from 'react'\nimport axios from 'axios'\nimport 'materialize-css/dist/css/materialize.min.css'\n\nimport './App.css'\nimport { Person, Column, SortType } from './types';\nimport { chunk, sort, findIndexById } from './helpers'\n\nimport Table from './components/Table';\nimport ModeSelector from './components/ModeSelector';\nimport Preloader from './components/Preloader';\nimport Pagination from './components/Pagination'\nimport PersonDescription from './components/PersonDescription';\n\nconst App: React.FC = () => {\n  const pageSize = 10\n\n  const [persons, setPersons] = useState<Person[]>([])\n  const [activePerson, setActivePerson] = useState<Person|null>(null)\n  \n  const [isModeSelected, setIsModeSelected] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [pageId, setPageId] = useState<number>(0)\n  const [sortedColomnKey, setSortedColumnKey] = useState<Column>('id')\n  const [sortType, setSortType] = useState<SortType>('asc')\n  const displayPersons: Person[] = persons.length > pageSize ? chunk(persons, pageSize)[pageId] : persons\n  \n  const handleModeSelected = async (url: string) => {\n    setIsLoading(true)\n    setIsModeSelected(true)\n    axios.get(url).then(({ data }) => {\n      const sortedPersons = sort(data, sortedColomnKey) as Person[]\n      setPersons(sortedPersons)\n      setIsLoading(false)\n    }).catch(() => {\n      alert('Не удалось загрузить данные')\n      setIsLoading(false)\n      setIsModeSelected(false)\n    })\n  }\n\n  const handlePageChanged = (selected: number) => {\n    setPageId(selected)\n  }\n\n  const handleSortTable = (columnKey: Column) => {\n    if (columnKey === sortedColomnKey) {\n      setPersons([...persons].reverse())\n      setSortType(sortType === 'asc' ? 'desc' : 'asc')\n    } else {\n      setSortedColumnKey(columnKey)\n      setSortType('asc')\n      const sortedPersons = sort(persons, columnKey) as Person[]\n      setPersons(sortedPersons)\n    }\n  }\n\n  const handlePersonSelected = (personId: number) => {\n    setActivePerson(persons[findIndexById(persons, personId)])\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n\n        {isLoading &&\n          <Preloader />\n        }\n\n        {!isModeSelected &&\n          <ModeSelector onModeSelected={handleModeSelected} />\n        }\n\n        {persons.length > 0 &&\n          <Table persons={displayPersons}\n            onSort={handleSortTable}\n            sortType={sortType}\n            sortedColomnKey={sortedColomnKey}\n            onPersonSelected={handlePersonSelected}\n          />\n        }\n\n        {persons.length > pageSize &&\n          <Pagination\n            pageCount={Math.ceil(persons.length / pageSize)}\n            currentPageId={pageId}\n            displayPages={6}\n            onPageChanged={handlePageChanged}\n          />\n        }\n\n        {activePerson &&\n          <PersonDescription person={activePerson} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}