{"version":3,"sources":["helpers.ts","components/Table/TableItem/index.tsx","components/Table/index.tsx","components/ModeSelector/index.tsx","components/Preloader/index.tsx","components/Pagination/index.tsx","components/PersonDescription/index.tsx","components/common/Input/index.tsx","components/CreatePersonForm/index.tsx","components/Search/index.tsx","App.tsx","index.tsx"],"names":["sort","array","key","a","b","prevItem","String","toLowerCase","nextItem","TableItem","person","onPersonSelected","onClick","id","firstName","lastName","email","phone","Table","persons","onSort","sortType","sortedColomnKey","className","map","ModeSelector","onModeSelected","Preloader","Pagination","pageCount","currentPageId","onPageChanged","displayPages","pagesNumbers","i","push","start","Math","floor","pages","slice","href","event","preventDefault","page","pageId","PersonDescription","defaultValue","description","address","streetAddress","city","state","zip","Input","value","setValue","placeholder","maxLenght","type","contentType","onChange","input","currentTarget","length","match","CreatePersonForm","onPersonCreate","useState","isFormValid","setIsFormValid","setId","setFirstName","setLastName","setEmail","setPhone","clearForm","useEffect","valid","trim","replace","checkValidForm","onSubmit","personData","Number","disabled","Search","onSearch","searchValue","setSearchValue","App","setPersons","activePerson","setActivePerson","isModeSelected","setIsModeSelected","isLoading","setIsLoading","isShowForm","setIsShowForm","setPageId","setSortedColumnKey","setSortType","filteredPersons","filter","includes","toString","filterPersons","displayPersons","size","result","ceil","chunk","handleModeSelected","url","axios","get","then","data","sortedPersons","catch","alert","fakeData","createdPerson","columnKey","reverse","personId","indexOf","find","item","selected","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2734e820.chunk.js","sourcesContent":["import { Column, Person } from './types';\r\n\r\nexport const chunk = (array: any[], size: number) => {\r\n  const result: typeof array = []\r\n  for (let i = 0; i < Math.ceil(array.length / size); i++) {\r\n    result.push(array.slice(i * size, (i + 1) * size))\r\n  }\r\n  return result\r\n}\r\n\r\nexport const sort = (array: any[], key: Column) => {\r\n  const sorted = [...array].sort((a, b) => {\r\n    const prevItem = String(a[key]).toLowerCase()\r\n    const nextItem = String(b[key]).toLowerCase()\r\n    return prevItem < nextItem ? -1 : prevItem > nextItem ? 1 : 0\r\n  })\r\n\r\n  return sorted\r\n}\r\n\r\nexport const findIndexById = (array: any[], id: number) => {\r\n  return array.indexOf(array.find(item => item.id === id))\r\n}\r\n\r\nexport const formatPhone = (phone: string) => {\r\n  return phone.replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1)$2-$3')\r\n}\r\n\r\nexport const filterPersons = (persons: Person[], searchValue: string) => {\r\n  searchValue = searchValue.toLowerCase()\r\n  if (!searchValue) {\r\n    return persons\r\n  }\r\n  return persons.filter(person => person.email.toLowerCase().includes(searchValue) ||\r\n    person.firstName.toLowerCase().includes(searchValue) ||\r\n    person.phone.includes(searchValue) ||\r\n    person.id.toString().includes(searchValue) ||\r\n    person.lastName.toLowerCase().includes(searchValue))\r\n}","import React from 'react'\r\nimport { Person } from '../../../types'\r\n\r\ntype TableItem = {\r\n  person: Person,\r\n  onPersonSelected: (personId: number) => void\r\n}\r\nconst TableItem: React.FC<TableItem> = ({ person, onPersonSelected }) => {\r\n  return <tr onClick={()=>onPersonSelected(person.id)}>\r\n    <td>{person.id}</td>\r\n    <td>{person.firstName}</td>\r\n    <td>{person.lastName}</td>\r\n    <td>{person.email}</td>\r\n    <td>{person.phone}</td>\r\n  </tr>\r\n}\r\n\r\nexport default TableItem","import React from 'react'\r\nimport { Person, Column, SortType } from '../../types'\r\nimport './table.css'\r\n\r\nimport TableItem from './TableItem'\r\n\r\ntype Props = {\r\n  persons: Person[],\r\n  sortType: SortType,\r\n  sortedColomnKey: Column,\r\n  onSort: (columnKey: Column) => void,\r\n  onPersonSelected: (personId: number) => void\r\n}\r\n\r\nconst Table: React.FC<Props> = ({ persons, onSort, sortType, sortedColomnKey, onPersonSelected }) => {\r\n  return (\r\n    <table className='highlight responsive-table'>\r\n      <thead>\r\n        <tr>\r\n          <th className={sortedColomnKey === 'id' ? 'sort-' + sortType : ''} onClick={() => onSort('id')}>Id</th>\r\n          <th className={sortedColomnKey === 'firstName' ? 'sort-' + sortType : ''} onClick={() => onSort('firstName')}>First Name</th>\r\n          <th className={sortedColomnKey === 'lastName' ? 'sort-' + sortType : ''} onClick={() => onSort('lastName')}>Last Name</th>\r\n          <th className={sortedColomnKey === 'email' ? 'sort-' + sortType : ''} onClick={() => onSort('email')}>Email</th>\r\n          <th className={sortedColomnKey === 'phone' ? 'sort-' + sortType : ''} onClick={() => onSort('phone')}>Phone</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {persons &&\r\n          persons.map(person => <TableItem key={person.id + person.phone} onPersonSelected={onPersonSelected} person={person} />)\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default Table","import React from 'react'\r\nimport './modeSelector.css'\r\n\r\ntype Props = {\r\n  onModeSelected: (url: string) => void\r\n}\r\nconst ModeSelector: React.FC<Props> = ({onModeSelected}) => {\r\n  const smallUrl = 'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}'\r\n  const bigUrl = 'http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}'\r\n\r\n  return (\r\n    <div className=\"mode-selector\">\r\n      <h5>Выберите объем загружаемых данных</h5>\r\n      <button className=\"btn-small\" onClick={() => onModeSelected(smallUrl)}>Маленький</button>\r\n      <button className=\"btn-small red\" onClick={() => onModeSelected(bigUrl)}>Большой</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModeSelector;\r\n","import React from 'react'\r\nimport './preloader.css'\r\n\r\nconst Preloader = () => {\r\n  return (\r\n    <div className=\"preloader\">\r\n      <div className=\"preloader-wrapper big active\">\r\n        <div className=\"spinner-layer spinner-blue-only\">\r\n          <div className=\"circle-clipper left\">\r\n            <div className=\"circle\"></div>\r\n          </div><div className=\"gap-patch\">\r\n            <div className=\"circle\"></div>\r\n          </div><div className=\"circle-clipper right\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Preloader","import React from 'react'\r\nimport './pagination.css'\r\n\r\ntype Props = {\r\n  pageCount: number,\r\n  currentPageId: number,\r\n  displayPages: number,\r\n  onPageChanged: (selected: number) => void\r\n}\r\nconst Pagination: React.FC<Props> = ({ pageCount, currentPageId, onPageChanged, displayPages }) => {\r\n  const pagesNumbers: number[] = []\r\n  for (let i = 0; i < pageCount; i++) pagesNumbers.push(i)\r\n\r\n  let start = currentPageId - Math.floor(displayPages / 2)\r\n  if (start <= 0) {\r\n    start = 0\r\n  } else if (start + displayPages > pageCount) {\r\n    start = pageCount - displayPages\r\n  }\r\n\r\n  const pages: number[] = pagesNumbers.slice(start, start + displayPages)\r\n\r\n  const handlePageIncrement = (event: React.MouseEvent) => {\r\n    event.preventDefault()\r\n    if (currentPageId < pageCount - 1) {\r\n      onPageChanged(currentPageId + 1)\r\n    }\r\n  }\r\n  const handlePageDecrement = (event: React.MouseEvent) => {\r\n    event.preventDefault()\r\n    if (currentPageId > 0) {\r\n      onPageChanged(currentPageId - 1)\r\n    }\r\n  }\r\n  const handleSelectPage = (pageId: number) => (event: React.MouseEvent) => {\r\n    event.preventDefault()\r\n    if (pageId !== currentPageId) {\r\n      onPageChanged(pageId)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ul className='pagination'>\r\n      <li className={currentPageId === 0 ? 'disabled' : ''}><a href='/' onClick={handlePageDecrement}>{'<'}</a></li>\r\n\r\n      {\r\n        pages.map(page => {\r\n          return <li key={page} className={page === currentPageId ? 'active' : ''}><a href='/' onClick={handleSelectPage(page)}>{page + 1}</a></li>\r\n        })\r\n      }\r\n\r\n      <li className={currentPageId === pageCount - 1 ? 'disabled' : ''}><a href='/' onClick={handlePageIncrement}>{'>'}</a></li>\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Pagination","import React from 'react'\r\nimport { Person } from '../../types'\r\nimport './personDescription.css'\r\n\r\ntype Props = {\r\n  person: Person\r\n}\r\nconst PersonDescription: React.FC<Props> = ({ person }) => {\r\n  return (\r\n    <div className=\"person-description\">\r\n      <div className=\"person-description__name\">\r\n        Выбран пользователь: <b>{person.firstName} {person.lastName}</b>\r\n      </div>\r\n      <div className=\"person-description__description\">\r\n        Описание: <textarea defaultValue={person.description} />\r\n      </div>\r\n      <div className=\"person-description__address\">\r\n        Адрес проживания: <b>{person.address.streetAddress}</b>\r\n      </div>\r\n      <div className=\"person-description__city\">\r\n        Город: <b>{person.address.city}</b>\r\n      </div>\r\n      <div className=\"person-description__state\">\r\n        Провинция: <b>{person.address.state}</b>\r\n      </div>\r\n      <div className=\"person-description__zip\">\r\n        Индекс: <b>{person.address.zip}</b>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PersonDescription\r\n","import React from 'react'\r\n\r\ntype Props = {\r\n  value: string\r\n  setValue: (newValue: string) => void\r\n  placeholder?: string\r\n  type?: string\r\n  maxLenght?: number\r\n  contentType?: 'number' | 'text'\r\n}\r\n\r\nconst Input: React.FC<Props> = ({\r\n  value,\r\n  setValue,\r\n  placeholder,\r\n  maxLenght = 32,\r\n  type = 'text',\r\n  contentType = 'text',\r\n}) => {\r\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const input = event.currentTarget.value\r\n    if (input.length <= maxLenght) {\r\n      if (contentType === 'number' && !!input.match(/[^\\d]/gi)) {\r\n        return\r\n      }\r\n      setValue(input)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <input\r\n      className='validate input-field'\r\n      placeholder={placeholder}\r\n      type={type}\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Input\r\n","import React, { useState, useEffect } from 'react'\r\nimport './createPersonForm.css'\r\nimport Input from '../common/Input'\r\nimport { PersonData } from '../../types'\r\n\r\ntype Props = {\r\n  onPersonCreate: (personData: PersonData) => void\r\n}\r\n\r\nconst CreatePersonForm: React.FC<Props> = ({ onPersonCreate }) => {\r\n  const phoneLenght: number = 10\r\n  const [isFormValid, setIsFormValid] = useState<boolean>(false)\r\n\r\n  const [id, setId] = useState<string>('')\r\n  const [firstName, setFirstName] = useState<string>('')\r\n  const [lastName, setLastName] = useState<string>('')\r\n  const [email, setEmail] = useState<string>('')\r\n  const [phone, setPhone] = useState<string>('')\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault()\r\n\r\n    const personData: PersonData = {\r\n      id: Number(id),\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phone,\r\n    }\r\n    clearForm()\r\n    onPersonCreate(personData)\r\n  }\r\n\r\n  const clearForm = () => {\r\n    setId('')\r\n    setFirstName('')\r\n    setLastName('')\r\n    setEmail('')\r\n    setPhone('')\r\n  }\r\n\r\n  const checkValidForm = () => {\r\n    const valid: boolean =\r\n      id.trim().length > 0 &&\r\n      firstName.trim().length > 0 &&\r\n      lastName.trim().length > 0 &&\r\n      email.trim().length > 0 &&\r\n      phone.replace(/[^\\d]/gi, '').length === phoneLenght\r\n\r\n    setIsFormValid(valid)\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkValidForm()\r\n  }, [id, firstName, lastName, email, phone]) // eslint-disable-line\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className='form-create-person'>\r\n      <Input\r\n        value={id}\r\n        setValue={setId}\r\n        placeholder='Id'\r\n        contentType='number'\r\n      />\r\n      <Input\r\n        value={firstName}\r\n        setValue={setFirstName}\r\n        placeholder='First name'\r\n      />\r\n      <Input value={lastName} setValue={setLastName} placeholder='Last name' />\r\n      <Input\r\n        value={email}\r\n        setValue={setEmail}\r\n        placeholder='Email'\r\n        type='email'\r\n      />\r\n      <Input\r\n        value={phone}\r\n        setValue={setPhone}\r\n        placeholder='Phone'\r\n        maxLenght={10}\r\n        contentType='number'\r\n      />\r\n\r\n      <button className='btn green' disabled={!isFormValid} type='submit'>\r\n        Добавить\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default CreatePersonForm\r\n","import React, { useState } from 'react'\r\nimport Input from '../common/Input'\r\nimport './search.css'\r\n\r\ntype Props = {\r\n  onSearch: (searchValue: string) => void\r\n}\r\n\r\nconst Search: React.FC<Props> = ({ onSearch }) => {\r\n  const [searchValue, setSearchValue] = useState<string>('')\r\n\r\n  const handleSearch = () => {\r\n    onSearch(searchValue)\r\n  }\r\n\r\n  return (\r\n    <div className='search'>\r\n      <button className='btn' onClick={handleSearch}>Поиск</button>\r\n      <Input value={searchValue} setValue={setSearchValue} placeholder='Поиск' />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport 'materialize-css/dist/css/materialize.min.css'\r\n\r\nimport './App.css'\r\nimport fakeData from './assets/fake-data.json'\r\nimport { Person, Column, SortType, PersonData } from './types';\r\nimport { chunk, sort, findIndexById, formatPhone, filterPersons } from './helpers'\r\n\r\nimport Table from './components/Table';\r\nimport ModeSelector from './components/ModeSelector';\r\nimport Preloader from './components/Preloader';\r\nimport Pagination from './components/Pagination'\r\nimport PersonDescription from './components/PersonDescription';\r\nimport CreatePersonForm from './components/CreatePersonForm';\r\nimport Search from './components/Search';\r\n\r\nconst App: React.FC = () => {\r\n  const pageSize = 10\r\n\r\n  const [persons, setPersons] = useState<Person[]>([])\r\n  const [activePerson, setActivePerson] = useState<Person | null>(null)\r\n\r\n  const [isModeSelected, setIsModeSelected] = useState<boolean>(false)\r\n  const [isLoading, setIsLoading] = useState<boolean>(false)\r\n  const [isShowForm, setIsShowForm] = useState<boolean>(false)\r\n\r\n  const [pageId, setPageId] = useState<number>(0)\r\n  const [sortedColomnKey, setSortedColumnKey] = useState<Column>('id')\r\n  const [sortType, setSortType] = useState<SortType>('asc')\r\n  const [searchValue, setSearchValue] = useState<string>('')\r\n\r\n  const filteredPersons = filterPersons(persons, searchValue)\r\n  const displayPersons: Person[] = persons.length > pageSize ? chunk(filteredPersons, pageSize)[pageId] : filteredPersons\r\n\r\n  const handleModeSelected = async (url: string) => {\r\n    setIsLoading(true)\r\n    setIsModeSelected(true)\r\n    axios.get(url).then(({ data }) => {\r\n      const sortedPersons = sort(data, sortedColomnKey) as Person[]\r\n      setPersons(sortedPersons)\r\n      setIsLoading(false)\r\n    }).catch(() => {\r\n      alert('Не удалось загрузить данные с сервера, пришлось использовать фэйковые')\r\n      setPersons(sort(fakeData, sortedColomnKey))\r\n      setIsLoading(false)\r\n    })\r\n  }\r\n\r\n  const handlePageChanged = (selected: number) => {\r\n    setPageId(selected)\r\n  }\r\n\r\n  const handleSortTable = (columnKey: Column) => {\r\n    if (columnKey === sortedColomnKey) {\r\n      setPersons([...persons].reverse())\r\n      setSortType(sortType === 'asc' ? 'desc' : 'asc')\r\n    } else {\r\n      setSortedColumnKey(columnKey)\r\n      setSortType('asc')\r\n      const sortedPersons = sort(persons, columnKey) as Person[]\r\n      setPersons(sortedPersons)\r\n    }\r\n  }\r\n\r\n  const handlePersonSelected = (personId: number) => {\r\n    setActivePerson(persons[findIndexById(persons, personId)])\r\n  }\r\n\r\n  const handlePersonCreate = (personData: PersonData) => {\r\n    const createdPerson: Person = {\r\n      ...personData,\r\n      phone: formatPhone(personData.phone),\r\n      address: {\r\n        streetAddress: '',\r\n        zip: '',\r\n        city: '',\r\n        state: ''\r\n      },\r\n      description: ''\r\n    }\r\n    setPersons([createdPerson, ...persons])\r\n  }\r\n\r\n  const handleOpenForm = () => {\r\n    setIsShowForm(!isShowForm)\r\n  }\r\n\r\n  const handleSearch = (searchValue: string) => {\r\n    setSearchValue(searchValue)\r\n    setPageId(0)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n\r\n        {isLoading &&\r\n          <Preloader />\r\n        }\r\n\r\n        {!isModeSelected &&\r\n          <ModeSelector onModeSelected={handleModeSelected} />\r\n        }\r\n\r\n        {persons.length > 0 &&\r\n          <>\r\n            <Search onSearch={handleSearch} />\r\n            {isShowForm\r\n              ? <CreatePersonForm onPersonCreate={handlePersonCreate} />\r\n              : <div className='form-create-person__btn-toggle'>\r\n                <button className='btn green' onClick={handleOpenForm}>Добавить</button>\r\n              </div>\r\n            }\r\n            <Table persons={displayPersons}\r\n              onSort={handleSortTable}\r\n              sortType={sortType}\r\n              sortedColomnKey={sortedColomnKey}\r\n              onPersonSelected={handlePersonSelected}\r\n            />\r\n          </>\r\n        }\r\n\r\n        {filteredPersons.length > pageSize &&\r\n          <Pagination\r\n            pageCount={Math.ceil(filteredPersons.length / pageSize)}\r\n            currentPageId={pageId}\r\n            displayPages={6}\r\n            onPageChanged={handlePageChanged}\r\n          />\r\n        }\r\n\r\n        {activePerson &&\r\n          <PersonDescription person={activePerson} />\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}