{"version":3,"sources":["components/Table/TableItem/index.tsx","components/Table/index.tsx","components/ModeSelector/index.tsx","components/Preloader/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TableItem","id","firstName","lastName","email","phone","Table","persons","map","person","key","ModeSelector","onModeSelected","className","onClick","Preloader","App","useState","setPersons","isModeSelected","setIsModeSelected","isLoading","setIsLoading","handleModeSelected","url","a","axios","get","then","data","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6VAaeA,G,YAVqB,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACrE,OAAO,4BACL,4BAAKJ,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,MCqBMC,EArBgB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChC,OACE,+BACE,+BACE,4BACE,kCACA,yCACA,wCACA,qCACA,uCAGJ,+BACGA,GACCA,EAAQC,KAAI,SAAAC,GAAM,OAAI,kBAAC,EAAD,eAAWC,IAAKD,EAAOR,GAAGQ,EAAOJ,OAAWI,UCJ7DE,G,MAbuB,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAItC,OACE,yBAAKC,UAAU,iBACb,uNACA,4BAAQA,UAAU,YAAYC,QAAS,kBAAMF,EANhC,2LAMb,0DACA,4BAAQC,UAAU,gBAAgBC,QAAS,kBAAMF,EANtC,qMAMX,iDCOSG,G,MAlBG,WAChB,OACE,yBAAKF,UAAU,aACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,YACX,yBAAKA,UAAU,aACnB,yBAAKA,UAAU,YACX,yBAAKA,UAAU,wBACnB,yBAAKA,UAAU,iBC6BZG,EAhCO,WAAO,IAAD,EACIC,mBAAmB,IADvB,mBACnBV,EADmB,KACVW,EADU,OAEkBD,oBAAkB,GAFpC,mBAEnBE,EAFmB,KAEHC,EAFG,OAGQH,oBAAkB,GAH1B,mBAGnBI,EAHmB,KAGRC,EAHQ,KAKpBC,EAAkB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACzBH,GAAa,GACbF,GAAkB,GAClBM,IAAMC,IAAIH,GAAKI,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACrBX,EAAWW,GACXP,GAAa,MALU,2CAAH,sDASxB,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,aAEZQ,GACC,kBAAC,EAAD,OAEAF,GACA,kBAAC,EAAD,CAAcP,eAAgBW,IAE/BhB,EAAQuB,OAAS,GAChB,kBAAC,EAAD,CAAOvB,QAASA,OCvBNwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82d8f6d7.chunk.js","sourcesContent":["import React from 'react'\nimport { Person } from '../../../types'\n\nconst TableItem: React.FC<Person> = ({ id, firstName, lastName, email, phone }) => {\n  return <tr>\n    <th>{id}</th>\n    <th>{firstName}</th>\n    <th>{lastName}</th>\n    <th>{email}</th>\n    <th>{phone}</th>\n  </tr>\n}\n\nexport default TableItem","import React from 'react'\nimport { Person } from '../../types'\n\nimport TableItem from './TableItem'\n\ntype Props = {\n  persons: Person[]\n}\n\nconst Table: React.FC<Props> = ({ persons }) => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Id</th>\n          <th>FirstName</th>\n          <th>LastName</th>\n          <th>Email</th>\n          <th>Phone</th>\n        </tr>\n      </thead>\n      <tbody>\n        {persons &&\n          persons.map(person => <TableItem key={person.id+person.phone} {...person} />) \n        }\n      </tbody>\n    </table>\n  )\n}\n\nexport default Table","import React from 'react'\nimport './modeSelector.css'\n\ntype Props = {\n  onModeSelected: (url: string) => void\n}\nconst ModeSelector: React.FC<Props> = ({onModeSelected}) => {\n  const smallUrl = 'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}'\n  const bigUrl = 'http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}'\n\n  return (\n    <div className=\"mode-selector\">\n      <h5>Выберите объем загружаемых данных</h5>\n      <button className=\"btn-small\" onClick={() => onModeSelected(smallUrl)}>Маленький</button>\n      <button className=\"btn-small red\" onClick={() => onModeSelected(bigUrl)}>Большой</button>\n    </div>\n  );\n}\n\nexport default ModeSelector;\n","import React from 'react'\nimport './preloader.css'\n\nconst Preloader = () => {\n  return (\n    <div className=\"preloader\">\n      <div className=\"preloader-wrapper big active\">\n        <div className=\"spinner-layer spinner-blue-only\">\n          <div className=\"circle-clipper left\">\n            <div className=\"circle\"></div>\n          </div><div className=\"gap-patch\">\n            <div className=\"circle\"></div>\n          </div><div className=\"circle-clipper right\">\n            <div className=\"circle\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Preloader","import React, { useState } from 'react'\nimport axios from 'axios'\nimport 'materialize-css/dist/css/materialize.min.css'\nimport './App.css'\n\nimport { Person } from './types';\nimport Table from './components/Table';\nimport ModeSelector from './components/ModeSelector';\nimport Preloader from './components/Preloader';\n\nconst App: React.FC = () => {\n  const [persons, setPersons] = useState<Person[]>([])\n  const [isModeSelected, setIsModeSelected] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n\n  const handleModeSelected = async (url: string) => {\n    setIsLoading(true)\n    setIsModeSelected(true)\n    axios.get(url).then(({ data }) => {\n      setPersons(data as Person[])\n      setIsLoading(false)\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n\n        {isLoading &&\n          <Preloader />\n        }\n        {!isModeSelected &&\n          <ModeSelector onModeSelected={handleModeSelected} />\n        }\n        {persons.length > 0 &&\n          <Table persons={persons} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}